# Common functions for port/* commands

# Lock the db
fn dblock {
	if(~ test -e $ports/ports.db.lock) {
		exits 'Found existing lock on ports.db, aborting'
	}

	touch $ports/ports.db.lock
}

# Unlock the db
fn dbunlock {
	rm $ports/ports.db.lock
}

# Remove a dbstr from the ports.db
fn dbrm {
	dblock
	tmpdb = '/tmp/ports.db.'^$pid
	sed 's/^'^$dbstr^'//' $ports/ports.db > $tmpdb
	mv $tmpdb $ports/ports.db
	dbunlock
}

# List all available ports
fn allports {
	du | awk '{print $2}' | grep -v '*./.git' | grep -v '^.$' | grep -v 'root' | grep -v 'lib' | grep -v 'bin' | sed 's/^.\///g' | grep '/'
}

# List all installed ports from ports.db raw
fn allinstalled {
	lines = `{cat $ports/ports.db | grep -v '^#' | grep -v '^stub:*'}
	for(l in $lines) {
		echo $l
	}
}

# Validate if the ports.db is un-corrupted
fn validatedb {
	n = 0
	lines = `{cat $ports/ports.db | grep -v '^#'}
	for(l in $lines) {
		n = `{echo $n '+1' | bc}
		
		# TODO - further validation
		nf = `{echo $l | awk -F ':' '{print NF}'}
		if(! ~ $nf 3)
			exits 'Corrupt line in db: '^$ports^'/ports.db:'^$n
	}
}

# Checks if a port is installed
# yes|no = installed(name objtype version)
fn installed {
	validatedb

	out = no
	res = `{grep $1 $ports/ports.db}
	for(r in $res) {
		n = `{echo $r | awk -F ':' '{print $1}'}
		o = `{echo $r | awk -F ':' '{print $2}'}
		v = `{echo $r | awk -F ':' '{print $3}'}
		
		# TODO - condense
		if(~ $name $n) {
			if(~ $o $objtype) {
				if(~ $v $version) {
					out = 'yes'
				}
			}
		}
	}
	echo $out
}

# Echo and exit a status message
fn exits {
	echo $1
	exit $1
}

# Get name of file in path: bar.tgz in foo/bar.tgz
fn filename {
	echo $1 | 
	awk '
	function basename(file, a, n) {
		n = split(file, a, "/")
		return a[n]
	}
	{
		print basename($0)
	}
	'
}

# Get extension for a file: .tar.gz in foo.tar.gz
fn extension {
	echo $1 | 
	awk -F '.' '
	{
		for(i = 2; i <= NF; i++) {
			printf(".%s", $i)
		}
		printf("\n")
	}
	'
}

# Sha512 checksum check
fn validsum {
	sum = `{sha1sum -2 512 $1 | awk '{print $1}'}
	if(! ~ $sum $sha512sum) {
		exits 'Checksum mismatch! Got: '^$sum
	}
	echo Checksum matched.
}
